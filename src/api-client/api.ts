/* tslint:disable */
/* eslint-disable */
/**
 * ZG Backend API
 * Backend app for ZmeyGorynych project. Written for fun :)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface HandlersResponse
 */
export interface HandlersResponse {
    /**
     * 
     * @type {object}
     * @memberof HandlersResponse
     */
    'data'?: object;
    /**
     * 
     * @type {string}
     * @memberof HandlersResponse
     */
    'message'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof HandlersResponse
     */
    'success'?: boolean;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all messages from mongodb
         * @summary Get all messages from mongodb
         * @param {number} [page] Page number
         * @param {number} [size] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nosqlGet: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/nosql`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a message by ID from mongodb
         * @summary Get a message by ID from mongodb
         * @param {string} id Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nosqlIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('nosqlIdGet', 'id', id)
            const localVarPath = `/nosql/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all messages from mysql
         * @summary Get all messages from mysql
         * @param {number} [page] Page number
         * @param {number} [size] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sqlGet: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sql`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a message by ID from mysql
         * @summary Get a message by ID from mysql
         * @param {string} id Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sqlIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sqlIdGet', 'id', id)
            const localVarPath = `/sql/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all messages from mongodb
         * @summary Get all messages from mongodb
         * @param {number} [page] Page number
         * @param {number} [size] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nosqlGet(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nosqlGet(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.nosqlGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a message by ID from mongodb
         * @summary Get a message by ID from mongodb
         * @param {string} id Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nosqlIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nosqlIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.nosqlIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all messages from mysql
         * @summary Get all messages from mysql
         * @param {number} [page] Page number
         * @param {number} [size] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sqlGet(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sqlGet(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.sqlGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a message by ID from mysql
         * @summary Get a message by ID from mysql
         * @param {string} id Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sqlIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sqlIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.sqlIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Get all messages from mongodb
         * @summary Get all messages from mongodb
         * @param {number} [page] Page number
         * @param {number} [size] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nosqlGet(page?: number, size?: number, options?: any): AxiosPromise<HandlersResponse> {
            return localVarFp.nosqlGet(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a message by ID from mongodb
         * @summary Get a message by ID from mongodb
         * @param {string} id Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nosqlIdGet(id: string, options?: any): AxiosPromise<HandlersResponse> {
            return localVarFp.nosqlIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all messages from mysql
         * @summary Get all messages from mysql
         * @param {number} [page] Page number
         * @param {number} [size] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sqlGet(page?: number, size?: number, options?: any): AxiosPromise<HandlersResponse> {
            return localVarFp.sqlGet(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a message by ID from mysql
         * @summary Get a message by ID from mysql
         * @param {string} id Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sqlIdGet(id: string, options?: any): AxiosPromise<HandlersResponse> {
            return localVarFp.sqlIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Get all messages from mongodb
     * @summary Get all messages from mongodb
     * @param {number} [page] Page number
     * @param {number} [size] Page size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public nosqlGet(page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).nosqlGet(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a message by ID from mongodb
     * @summary Get a message by ID from mongodb
     * @param {string} id Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public nosqlIdGet(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).nosqlIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all messages from mysql
     * @summary Get all messages from mysql
     * @param {number} [page] Page number
     * @param {number} [size] Page size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sqlGet(page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sqlGet(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a message by ID from mysql
     * @summary Get a message by ID from mysql
     * @param {string} id Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sqlIdGet(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sqlIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}



